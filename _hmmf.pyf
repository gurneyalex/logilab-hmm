!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module _hmmf ! in 
    interface  ! in :_hmmf
        module hmm_for ! in :_hmmf:_hmmf.f90
            subroutine alpha_scaled(a,b,pi,r,s,n,t) ! in :_hmmf:_hmmf.f90:hmm_for
                double precision dimension(n,n),intent(in) :: a
                double precision dimension(t,n),intent(in),depend(n) :: b
                double precision dimension(n),intent(in),depend(n) :: pi
                double precision dimension(t,n),intent(out),depend(t,n) :: r
                double precision dimension(t),intent(out),depend(t) :: s
                integer optional,check(shape(a,0)==n),depend(a) :: n=shape(a,0)
                integer optional,check(shape(b,0)==t),depend(b) :: t=shape(b,0)
            end subroutine alpha_scaled
            subroutine beta_scaled(a,b,r,s,n,t) ! in :_hmmf:_hmmf.f90:hmm_for
                double precision dimension(n,n),intent(in) :: a
                double precision dimension(t,n),intent(in),depend(n) :: b
                double precision dimension(t,n),intent(out),depend(t,n) :: r
                double precision dimension(t),intent(in),depend(t) :: s
                integer optional,check(shape(a,0)==n),depend(a) :: n=shape(a,0)
                integer optional,check(shape(b,0)==t),depend(b) :: t=shape(b,0)
            end subroutine beta_scaled
            subroutine hmm_ksi(a,b,al,be,ksi,n,t) ! in :_hmmf:_hmmf.f90:hmm_for
                double precision dimension(n,n),intent(in) :: a
                double precision dimension(t,n),intent(in),depend(n) :: b
                double precision dimension(t,n),intent(in),depend(t,n) :: al
                double precision dimension(t,n),intent(in),depend(t,n) :: be
                double precision dimension(t - 1,n,n),intent(out),depend(t,n,n) :: ksi
                integer optional,check(shape(a,0)==n),depend(a) :: n=shape(a,0)
                integer optional,check(shape(b,0)==t),depend(b) :: t=shape(b,0)
            end subroutine hmm_ksi
            subroutine update_iter_b(g,obs,b_bar,m,n,t) ! in :_hmmf:_hmmf.f90:hmm_for
                double precision dimension(t,n),intent(in) :: g
                integer dimension(t),intent(in),depend(t) :: obs
                double precision dimension(m,n),intent(in,out),depend(n) :: b_bar
                integer optional,check(shape(b_bar,0)==m),depend(b_bar) :: m=shape(b_bar,0)
                integer optional,check(shape(g,1)==n),depend(g) :: n=shape(g,1)
                integer optional,check(shape(g,0)==t),depend(g) :: t=shape(g,0)
            end subroutine update_iter_b
            subroutine correctm(g,idx,v,m,n) ! in :_hmmf:_hmmf.f90:hmm_for
                double precision dimension(m,n),intent(in,out) :: g
                integer :: idx
                double precision :: v
                integer optional,check(shape(g,0)==m),depend(g) :: m=shape(g,0)
                integer optional,check(shape(g,1)==n),depend(g) :: n=shape(g,1)
            end subroutine correctm
            subroutine normalize_b(b,v,m,n) ! in :_hmmf:_hmmf.f90:hmm_for
                double precision dimension(m,n),intent(in,out) :: b
                double precision dimension(n),intent(in),depend(n) :: v
                integer optional,check(shape(b,0)==m),depend(b) :: m=shape(b,0)
                integer optional,check(shape(b,1)==n),depend(b) :: n=shape(b,1)
            end subroutine normalize_b
            subroutine gamma(al,b,s,g,m,n) ! in :_hmmf:_hmmf.f90:hmm_for
                double precision dimension(m,n),intent(in) :: al
                double precision dimension(m,n),intent(in),depend(m,n) :: b
                double precision dimension(m),intent(in),depend(m) :: s
                double precision dimension(m,n),intent(out),depend(m,n) :: g
                integer optional,check(shape(al,0)==m),depend(al) :: m=shape(al,0)
                integer optional,check(shape(al,1)==n),depend(al) :: n=shape(al,1)
            end subroutine gamma
        end module hmm_for
    end interface 
end python module _hmmf

! This file was auto-generated with f2py (version:2_3473).
! See http://cens.ioc.ee/projects/f2py2e/
